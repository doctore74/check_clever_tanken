#!/usr/bin/perl

# Date:
#  2017-12-21
#
# Author:
#  Christian Wirtz, doc@snowheaven.de
#
# Description:
#   Parse clever-tanken.de to extract provided fuel types.
#   This version adds some functionality
#
# Source/Forked from:
#   https://blog.veloc1ty.de/2017/04/18/benzinpreis-monitoring-mit-icinga-2/
#
# Usage:
#   default Icinga2:     ./check_clever_tanken_args --station 47684
#   Check_MK/Nagios/...: ./check_clever_tanken_args --station 47684 --favorite Super --outputtype singleline --perfdatastyle short
#
# Changelog:
#   2017-12-21 CW Added some inline documentation
#   2017-12-21 CW added optional debug output            => arg: --debug
#   2017-12-21 CW optimize output for Check_MK           => arg: --outputtype
#   2017-12-21 CW optimize perfdata for Check_MK         => arg: --perfdatastyle
#   2017-12-21 CW added optional hyperlink to gasstation => arg: --hlink
#   2017-12-21 CW Added functionality to set a favorite  => arg: --favorite
#                 Filter displaystring for favorite (display everything what beginns with provided arg string --favorite)
#                 f.e. "Diesel", "Super" or "S"

# ToDo.
#   2017-12-21 CW Euro character isn'n working UTF8?

use strict;
use LWP::UserAgent;
use Getopt::Long;
use utf8;

my $stationID     = 0;
my $alarm         = {};
my $debug;              # (default: unset)
my $favorite      = ""; # Regex: ...beginns with given string (default: unset)
my $outputtype    = ""; # singleline or multiline (default: multiline)
my $perfdatastyle = ""; # short or long (default: long)
my $hlink;              # (default: unset)
my $hyperlink     = ""; # for output of hyperlink to http://www.clever-tanken.de/tankstelle_details/{stationID}

sub exitCritical {
    printf("CRITICAL - %s\n", shift);
    exit(2);
}

sub exchangeSpecialCharacters {
    my $string = shift;

    $string =~ s/&amp;/und/ig;
    $string =~ s/ß/ss/ig;
    $string =~ s/ +/ /ig;
    $string =~ s/ä/ae/ig;
    $string =~ s/ö/ae/ig;
    $string =~ s/ü/ae/ig;
    $string =~ s/@/at/ig;

    return $string;
}

sub parseArguments {
    my @alarmings = ();

    GetOptions(
        'debug'           => \$debug,
        'station=i'       => \$stationID,
        'alarm=s'         => \@alarmings,
        'favorite=s'      => \$favorite,
        'outputtype=s'    => \$outputtype,
        'perfdatastyle=s' => \$perfdatastyle,
        'hlink'           => \$hlink,
    );

    if ( $stationID !~ /^\d+$/ ) {
        exitCritical('Station ID is not a number');
    }

    if ( $stationID <= 0 ) {
        exitCritical('Station ID can\'t be below 1');
    }

    foreach my $currentAlarm ( @alarmings ) {
        if ( $currentAlarm =~ m/^(.*): (.*)$/ ) {
            $alarm->{$1} = $2;
        }
    }

    if ( $outputtype eq '' ) {
        $outputtype = "multiline";
    }

    if ( $perfdatastyle eq '' ) {
        $perfdatastyle = "long";
    }

    if ( $hlink ) {
        $hlink = "http://www.clever-tanken.de/tankstelle_details/";
    }

    print "stationID    : ".$stationID."\n" if ($debug);
    print "favorite     : ".$favorite."\n" if ($debug);
    print "outputtype   : ".$outputtype."\n" if ($debug);
    print "perfdatastyle: ".$perfdatastyle."\n" if ($debug);
    print "hlink        : ".$hlink."\n" if ($debug);
}

sub extractFuelType {
    my $line = shift;

    if ( $line =~ /fuel-price-type"><span>(.*?)(<\/span><span class|<\/div>)/ ) {
        return $1;
    }
    else {
        return undef;
    }
}

sub extractFuelPrice {
    my $line = shift;

    if ( $line =~ /display_preis">(\d+\.\d+) <\/span>/ ) {
        return $1;
    }
    else {
        exitCritical('Was not able to extract price from line: ' . $line);
    }
}

sub extractStationStreet {
    my $line = shift;

    if ( $line =~ /<span itemprop="streetAddress">(.*?)<\/span>/ ) {
        return exchangeSpecialCharacters($1);
    }
    else {
        return undef;
    }
}

sub extractStationName {
    my $line = shift;

    if ( $line =~ /<span id="main-content-fuel-station-header-name" itemprop="name">(.*?)<\/span>/ ) {
        return exchangeSpecialCharacters($1);
    }
    else {
        return undef;
    }
}

sub convertToNagiosVariable {
    my $string = shift;
    $string = exchangeSpecialCharacters($string);

    $string =~ s/\.//ig;
    $string =~ s/ +/_/ig;
    $string =~ s/-+/_/ig;

    return $string;
}

sub produceUserAgent {
    my $ua = LWP::UserAgent->new();
    $ua->agent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:52.0) Gecko/20100101 Firefox/52.0');
    $ua->default_header('Referer' => 'http://www.clever-tanken.de/');
    $ua->default_header('Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8');
    $ua->default_header('Accept-Language' => 'de,en-US;q=0.7,en;q=0.3');
    $ua->default_header('Accept-Encoding' => 'gzip, deflate');
    $ua->default_header('Connection' => 'close');
    $ua->default_header('Upgrade-Insecure-Requests' => '1');
    $ua->default_header('DNT' => '1');

    return $ua;
}

sub generateDisplayAndPerformanceString {
    my ( $stationName, $stationStreet, $prices ) = @_;

    # Multiline output
    # => Freie Tankstelle Ahnfeldstr. 12: <br>Autogas: 0.57 ...<br>Diesel: ...
    #my $displayString = sprintf("%s %s:\n\n", $stationName, $stationStreet);

    # Singleline output
    # => Autogas: 0.57 ...<br>Diesel: ...
    my $displayString = "";

    my $performanceString = '';
    my $performacePrefix =
        convertToNagiosVariable($stationName . ' ' . $stationStreet);
    my $returnCode = 0;

    foreach my $currentFuel ( sort keys %{$prices} ) {
        # Generate a performancestring part

        # => Freie_Tankstelle_Ahnfeldstr_12_Autogas=0.57
        if ($perfdatastyle eq "long") {
          $performanceString .= sprintf('%s_%s=%.2f ',
          $performacePrefix,
          convertToNagiosVariable($currentFuel),
          $prices->{$currentFuel});
        }

        # => Autogas_Freie_Tankstelle_Ahnfeldstr_12=0.57
        #$performanceString .= sprintf('%s_%s=%.2f ',
        #    convertToNagiosVariable($currentFuel),
        #    $performacePrefix,
        #    $prices->{$currentFuel});

        # => Autogas=0.57
        if ($perfdatastyle eq "short") {
          $performanceString .= sprintf('%s=%.2f ',
              convertToNagiosVariable($currentFuel),
              $prices->{$currentFuel});
        }

        # Generate a display string part
        if ( exists($alarm->{$currentFuel}) ) {
            # Check if the current price is below the limit
            my $priceDifference = $prices->{$currentFuel} - $alarm->{$currentFuel};

            if ( $priceDifference == 0 ) {
                $displayString .= sprintf("*%s: %.2f €/l -> Limit von %.2f €/l erreicht*\n",
                    $currentFuel, $prices->{$currentFuel},
                    $alarm->{$currentFuel});

                $returnCode = 1;

                next; # We have what we want, so skip the rest
            }
            elsif ( $priceDifference < 0 ) {
                $displayString .= sprintf("*%s: %.2f €/l -> %.0f ct günstiger als das Limit von %.2f €/l*\n",
                    $currentFuel, $prices->{$currentFuel},
                    abs($priceDifference) * 100,
                    $alarm->{$currentFuel});

                $returnCode = 1;

                next; # We have what we want, so skip the rest
            }
        }

        # Displaystring (EURO char doesn't work at Check_MK? -> â¬/l  !!!!!)
        #$displayString .= sprintf("%s: %.2f €/l\n",

        # Filter displaystring for favorite (display everything what beginns with provided arg for --favorite)
        if ($favorite eq "") {
          #if ($outputtype eq "singleline") { $displayString .= sprintf("%s: %.2f €/l ", $currentFuel, $prices->{$currentFuel}); }
          if ($outputtype eq "singleline") { $displayString .= sprintf("%s: %.2f E/l ", $currentFuel, $prices->{$currentFuel}); }
          #if ($outputtype eq "multiline")  { $displayString .= sprintf("%s: %.2f €/l\n", $currentFuel, $prices->{$currentFuel}); }
          if ($outputtype eq "multiline")  { $displayString .= sprintf("%s: %.2f E/l\n", $currentFuel, $prices->{$currentFuel}); }
        }
	else {
          #if ($outputtype eq "singleline") { $displayString .= sprintf("%s: %.2f €/l ", $currentFuel, $prices->{$currentFuel}) if ($currentFuel =~ m/^$favorite/); }
          if ($outputtype eq "singleline") { $displayString .= sprintf("%s: %.2f E/l ", $currentFuel, $prices->{$currentFuel}) if ($currentFuel =~ m/^$favorite/); }
          #if ($outputtype eq "multiline")  { $displayString .= sprintf("%s: %.2f €/l\n", $currentFuel, $prices->{$currentFuel}) if ($currentFuel =~ m/^$favorite/); }
          if ($outputtype eq "multiline")  { $displayString .= sprintf("%s: %.2f E/l\n", $currentFuel, $prices->{$currentFuel}) if ($currentFuel =~ m/^$favorite/); }
        }
}

    # Generate output with hyperlink
    $hyperlink = "<a href='".$hlink.$stationID."' target='_blank'>".$displayString." ".$hyperlink."</a>";

    # Output
    printf("%s|%s\n", $displayString, $performanceString) if (!$hlink);
    print $hyperlink."|".$performanceString."\n" if ($hlink);

    exit($returnCode);
}

sub analyzeStationContent {
    my $response = shift;

    my @content = split(/\n/, $response->decoded_content());

    my $stationName = undef;
    my $stationStreet = undef;
    my $prices = {};

    for ( my $currentLine = 0; $currentLine < scalar(@content); $currentLine++ ) {
        my $currentLineString = $content[$currentLine];

        if ( my $name = extractStationName($currentLineString) ) {
            $stationName = $name;
            next;
        }

        if ( my $street = extractStationStreet($currentLineString) ) {
            $stationStreet = $street;
            next;
        }

        if ( my $fuelType = extractFuelType($currentLineString) ) {
            $prices->{$fuelType} =
                extractFuelPrice($content[$currentLine + 3]);
        }
    }

    $stationName = exchangeSpecialCharacters($stationName);
    $stationStreet = exchangeSpecialCharacters($stationStreet);

    if ( length($stationName) == 0 ) {
        exitCritical('Was not able to extract station\'s name');
    }

    if ( length($stationStreet) == 0 ) {
        exitCritical('Was not able to extract station\'s street');
    }

    generateDisplayAndPerformanceString($stationName,
        $stationStreet, $prices);
}

sub main {
    parseArguments();

    my $ua = produceUserAgent();

    my $response = $ua->get('http://www.clever-tanken.de/tankstelle_details/' . $stationID);

    if ( $response->is_success() ) {
        analyzeStationContent($response);
    }
    else {
        exitCritical('Was not able to fetch page for station with id ' . $stationID);
    }
}

main();
